#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(295, 426);
inline const PParam KNIGHT_MAT = S(1046, 991);
inline const PParam BISHOP_MAT = S(1026, 1046);
inline const PParam ROOK_MAT   = S(1557, 1756);
inline const PParam QUEEN_MAT  = S(3505, 3154);
inline const PParam TEMPO_VAL  = S(51, 17);

inline const PParam BISHOP_PAIR_VAL  = S(73, 183);
inline const PParam DOUBLED_PAWN_VAL = S(-46, -79);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, 0);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(7, 21), S(54, 31), S(84, 69), S(200, 136), S(487, 317), S(1597, 971),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(55, 46), S(53, 25), S(59, 47), S(123, 116), S(720, -148),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-61, 7), S(-43, 18), S(-20, 87), S(61, 161), S(94, 285), S(184, 84),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(52, -46), S(30, -4), S(3, 32), S(9, 72), S(98, 141), S(142, 285),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(19, -49), S(-6, 4), S(-30, -18), S(-28, -50), S(-46, -90), S(-189, -144),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(1, 33), S(-48, 39), S(-28, -12), S(-16, -40), S(-8, -36), S(22, -43), S(-8, -56),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-174, -85), S(38, -48), S(0, -3), S(20, 24), S(21, 48), S(45, 47), S(-10, 67),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-245, -225), S(-119, -97), S(-54, -33), S(0, -12), S(46, 4), S(72, 45), S(107, 40), S(136, 35), S(183, -41),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-157, -353), S(-74, -188), S(6, -122), S(23, -64), S(56, -29), S(70, -6), S(91, 2), S(102, 11), S(111, 20), S(118, 13), S(144, -1), S(191, -49), S(231, -75), S(291, -108),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-159, -398), S(-100, -117), S(-43, -50), S(-16, -44), S(5, -12), S(25, 3), S(43, 12), S(75, 9), S(98, 20), S(125, 30), S(150, 31), S(162, 37), S(206, 26), S(208, 18), S(328, -90),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(78, 107), S(-328, -1010), S(-202, -573), S(-155, -343), S(-122, -253), S(-88, -181), S(-105, -8), S(-72, -43), S(-66, 2), S(-57, 21), S(-50, 46), S(-44, 68), S(-25, 59), S(-15, 61), S(-9, 66), S(13, 49), S(4, 63), S(8, 52), S(30, 26), S(61, -28), S(91, -58), S(110, -115), S(201, -183), S(371, -360), S(274, -329), S(831, -643), S(612, -523), S(1360, -974),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(295, 853), S(120, 386), S(37, 464), S(31, 499), S(9, 495), S(-22, 491), S(2, 488), S(3, 469), S(25, 387),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -35), S(149, -79),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(31, 2), S(138, -39),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -52), S(76, -70), S(126, -74), S(133, -125),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-49, 39), S(-65, 49), S(3, -13), S(164, -98), S(395, -257),
};

inline const PParam PAWN_THREAT_KNIGHT = S(220, 64);
inline const PParam PAWN_THREAT_BISHOP = S(188, 87);
inline const PParam PAWN_THREAT_ROOK   = S(181, 35);
inline const PParam PAWN_THREAT_QUEEN  = S(155, -71);

inline const PParam KNIGHT_THREAT_BISHOP = S(89, 72);
inline const PParam KNIGHT_THREAT_ROOK   = S(235, -11);
inline const PParam KNIGHT_THREAT_QUEEN  = S(142, -78);

inline const PParam BISHOP_THREAT_KNIGHT = S(95, 20);
inline const PParam BISHOP_THREAT_ROOK   = S(217, 47);
inline const PParam BISHOP_THREAT_QUEEN  = S(178, 36);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(168, 396),    S(169, 441),    S(204, 437),    S(326, 284),    S(225, 304),    S(239, 369),    S(146, 369),    S(230, 343),    //
    S(44, -30),     S(185, 0),      S(122, -60),    S(150, -128),   S(78, -135),    S(18, -84),     S(-31, -23),    S(-57, -45),    //
    S(-34, -68),    S(-11, -63),    S(-5, -109),    S(-21, -127),   S(-35, -129),   S(-75, -131),   S(-104, -79),   S(-137, -52),   //
    S(-36, -130),   S(-16, -98),    S(-32, -140),   S(-39, -142),   S(-61, -153),   S(-90, -136),   S(-138, -77),   S(-161, -90),   //
    S(-43, -162),   S(23, -158),    S(-35, -114),   S(-76, -108),   S(-79, -125),   S(-127, -128),  S(-138, -111),  S(-180, -109),  //
    S(-35, -162),   S(109, -156),   S(48, -120),    S(-23, -100),   S(-56, -125),   S(-89, -123),   S(-112, -89),   S(-153, -105),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-409, -137),  S(-156, -37),   S(-481, 303),   S(-64, 70),     S(-269, 98),    S(-334, 144),   S(-562, 45),    S(-528, 0),     //
    S(17, -10),     S(123, 13),     S(201, -62),    S(70, 50),      S(111, 32),     S(46, 5),       S(-10, 12),     S(-3, -38),     //
    S(49, -15),     S(51, 82),      S(214, 43),     S(115, 78),     S(153, 46),     S(43, 62),      S(47, 26),      S(-55, 27),     //
    S(120, 22),     S(69, 70),      S(101, 80),     S(91, 102),     S(96, 81),      S(69, 84),      S(22, 20),      S(6, 35),       //
    S(90, 12),      S(105, 21),     S(98, 47),      S(67, 57),      S(67, 67),      S(61, 73),      S(12, 40),      S(33, -58),     //
    S(10, -20),     S(27, -35),     S(14, -18),     S(24, 47),      S(38, 40),      S(-27, 6),      S(-13, -27),    S(-55, -31),    //
    S(22, 8),       S(56, -38),     S(8, -21),      S(4, -3),       S(-8, -15),     S(-37, -32),    S(-4, -50),     S(-92, -140),   //
    S(-36, -37),    S(12, -48),     S(21, -59),     S(42, -39),     S(20, -17),     S(-41, -71),    S(-37, -55),    S(-74, -102),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-186, 129),   S(-147, 63),    S(-463, 107),   S(-292, 127),   S(-255, 126),   S(-422, 134),   S(-73, 99),     S(-31, 75),     //
    S(24, -16),     S(36, 58),      S(37, 58),      S(45, 27),      S(34, 37),      S(28, 48),      S(-10, 51),     S(-41, 48),     //
    S(50, 61),      S(86, 65),      S(256, 43),     S(151, 32),     S(108, 42),     S(56, 81),      S(160, 27),     S(15, 67),      //
    S(59, 6),       S(57, 64),      S(143, 47),     S(148, 63),     S(144, 74),     S(76, 74),      S(56, 52),      S(-15, 54),     //
    S(42, -10),     S(78, 26),      S(83, 39),      S(103, 60),     S(101, 85),     S(41, 77),      S(31, 22),      S(21, -34),     //
    S(76, -27),     S(130, 0),      S(125, 7),      S(54, 56),      S(45, 66),      S(34, 66),      S(93, 8),       S(50, -40),     //
    S(69, -65),     S(121, -31),    S(90, -32),     S(59, 10),      S(47, -15),     S(59, -24),     S(23, -2),      S(48, -89),     //
    S(56, -30),     S(54, 8),       S(47, 15),      S(58, -34),     S(70, -47),     S(66, -3),      S(66, -45),     S(30, -22),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(134, 43),     S(225, 35),     S(116, 81),     S(117, 82),     S(133, 62),     S(75, 78),      S(97, 76),      S(120, 72),     //
    S(107, 83),     S(179, 63),     S(234, 49),     S(176, 87),     S(180, 85),     S(109, 97),     S(67, 106),     S(56, 115),     //
    S(60, 71),      S(255, 24),     S(269, 12),     S(273, 13),     S(208, 34),     S(119, 74),     S(155, 54),     S(13, 109),     //
    S(15, 68),      S(75, 57),      S(118, 50),     S(167, 1),      S(126, 34),     S(56, 92),      S(35, 87),      S(-60, 98),     //
    S(-80, 21),     S(40, 18),      S(23, 32),      S(20, 31),      S(13, 28),      S(-21, 81),     S(-60, 77),     S(-88, 66),     //
    S(-110, 15),    S(11, -47),     S(-10, -6),     S(-37, 5),      S(0, -24),      S(-73, 40),     S(-82, 23),     S(-93, 11),     //
    S(-142, 19),    S(-51, -31),    S(-14, -37),    S(-6, -33),     S(-18, -22),    S(-39, -11),    S(-75, -30),    S(-106, -15),   //
    S(-112, 13),    S(-76, 19),     S(-31, -13),    S(2, -33),      S(-7, -18),     S(-17, -15),    S(-41, -22),    S(-72, -4),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(30, 113),     S(39, 77),      S(84, 65),      S(-69, 209),    S(14, 111),     S(-78, 171),    S(36, 56),      S(-18, 51),     //
    S(83, 86),      S(-65, 226),    S(-57, 288),    S(-122, 298),   S(-93, 235),    S(-131, 255),   S(-66, 141),    S(-26, 63),     //
    S(-18, 158),    S(94, 152),     S(59, 193),     S(11, 234),     S(-35, 214),    S(-76, 223),    S(12, 93),      S(-26, 60),     //
    S(59, 58),      S(46, 138),     S(20, 169),     S(15, 228),     S(-14, 228),    S(-16, 148),    S(8, 61),       S(-11, 42),     //
    S(23, 109),     S(64, 49),      S(27, 136),     S(-3, 184),     S(-18, 175),    S(-15, 131),    S(-12, 46),     S(-10, -1),     //
    S(50, -117),    S(54, -12),     S(44, 60),      S(-17, 100),    S(8, 41),       S(5, 46),       S(24, -41),     S(-10, -16),    //
    S(41, -231),    S(47, -280),    S(25, -125),    S(48, -49),     S(9, -18),      S(44, -125),    S(23, -50),     S(0, -53),      //
    S(-53, -102),   S(-1, -338),    S(7, -323),     S(36, -235),    S(48, -137),    S(63, -218),    S(58, -179),    S(-15, -90),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(291, -583),   S(271, -105),   S(-81, 4),      S(-94, 39),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(273, -156),   S(69, 88),      S(-11, 119),    S(168, 64),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-33, 47),     S(84, 118),     S(140, 87),     S(138, 47),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-220, 64),    S(56, 91),      S(82, 88),      S(38, 61),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-196, 19),    S(-29, 64),     S(21, 62),      S(-61, 101),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-154, 2),     S(57, 6),       S(-25, 56),     S(-74, 87),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(78, -87),     S(125, -28),    S(29, 17),      S(-63, 67),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-43, -121),   S(82, -108),    S(-24, -72),    S(-16, -84),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
